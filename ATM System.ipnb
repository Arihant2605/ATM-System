{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "v6r1WADVn1zO",
        "outputId": "2e4bfc26-0386-4b03-f03b-c8c413000291"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1: Balance\n",
            "2: Deposit\n",
            "3: Withdraw\n",
            "Enter your choice: 2\n",
            "Enter the amount of money you want to deposit: 600\n",
            "Balance: 1100\n"
          ]
        }
      ],
      "source": [
        "class ATM:\n",
        "    def __init__(self):\n",
        "        self.Balance = 500\n",
        "\n",
        "    def choice(self):\n",
        "        print(\"1: Balance\\n2: Deposit\\n3: Withdraw\")\n",
        "        self.l = int(input(\"Enter your choice: \"))\n",
        "        if self.l == 1:\n",
        "            print(\"Balance:\", self.Balance)\n",
        "        elif self.l == 2:\n",
        "            self.deposit()\n",
        "        elif self.l == 3:\n",
        "            self.withdraw()\n",
        "        else:\n",
        "            print(\"Wrong choice!\")\n",
        "\n",
        "    def deposit(self):\n",
        "        self.n = int(input(\"Enter the amount of money you want to deposit: \"))\n",
        "        self.Balance += self.n\n",
        "        print(\"Balance:\", self.Balance)\n",
        "\n",
        "    def withdraw(self):\n",
        "        self.m = int(input(\"Enter the amount of money you want to withdraw: \"))\n",
        "        if self.m > self.Balance:\n",
        "            print(\"Insufficient balance\")\n",
        "        elif self.m == self.Balance:\n",
        "            self.Balance = 0\n",
        "            print(\"Balance is now 0\")\n",
        "        else:\n",
        "            self.Balance -= self.m\n",
        "            print(\"Balance:\", self.Balance)\n",
        "\n",
        "o = ATM()\n",
        "o.choice()\n"
      ]
    }
  ]
}
